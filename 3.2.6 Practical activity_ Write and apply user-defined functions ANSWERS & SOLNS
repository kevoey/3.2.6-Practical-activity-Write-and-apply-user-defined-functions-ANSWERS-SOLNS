{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0269988e",
   "metadata": {},
   "source": [
    "# 3.2.6 Practical activity: Write and apply user-defined functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0da40813",
   "metadata": {},
   "outputs": [],
   "source": [
    "# You can continue to work in your own Jupyter Notebook, or you can use the solution file from the \n",
    "#previous practical activity ( LSE_DA201_PA_apply_function_solution.ipynb ) as a starting point for this portion of\n",
    "#the analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12ce259f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#What is the average rating per movie?\n",
    "#    Create a new DataFrame by submitting the mov_ott DataFrame and name it mov_ott_ratings. \n",
    "    #Specify the three columns as ID, IMDb and Rotten Tomatoes.\n",
    "#    Replace the NaN values with 0 in both the IMDb and Rotten Tomatoes columns.\n",
    "#    Write a user-defined function to calculate the average rating received. \n",
    "    #The IMDb column (value out of 10) represents the ratings allocated by the broadcasting company, \n",
    "    #while Rotten Tomatoes represents the ratings by viewers. The formula will be ((ImDb/10)+Rotten tomatoes)/2\n",
    "#    Specify the def keyword and the function name as avg_col2 (average of two columns).\n",
    "#    Specify the parameter as df1, df2 (you can use a different name).\n",
    "#    Specify to function to be calculated and the return argument.\n",
    "#    Add a new column to the mov_ott_ratings DataFrame as ratings to store the calculated average rating values.\n",
    "#    Print the DataFrame.\n",
    "\n",
    "mov_ott_ratings = mov_ott[[\"ID\",\"IMDb\",\"Rotten Tomatoes\"]]\n",
    "mov_ott_ratings\n",
    "\n",
    "def avg_col2 (df1,df2):\n",
    "    x = ((df1/10)+ df2)/2\n",
    "    return x;\n",
    "\n",
    "mov_ott_ratings[\"avg_rating\"] = avg_col2(mov_ott_ratings[\"IMDb\"],mov_ott_ratings[\"Rotten Tomatoes\"])\n",
    "mov_ott_ratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e04e0930",
   "metadata": {},
   "outputs": [],
   "source": [
    "# How many movies were released per content rating?\n",
    "#    Write a user-defined function to calculate the sum of all the movies released per Age group.\n",
    "#    Specify the def keyword and the function name as cat_cnt (categorical count).\n",
    "#    Specify the parameter as df1 (you can use a different name).\n",
    "#    Specify to print the parameter and the total of the values with the value_count() method.\n",
    "#    Specify the arguments as the DataFrame to use (mov_ott) and the column as Age. Ensure the data type is \n",
    "#    category by specifying astype('category').\n",
    "#    Print the Series.\n",
    "\n",
    "def cat_cnt (df1):\n",
    "    print(df1.value_counts())\n",
    "    return ;\n",
    "\n",
    "cat_cnt(mov_ott[\"Age\"].astype('category')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84664dce",
   "metadata": {},
   "outputs": [],
   "source": [
    "#How many movies were released per year?\n",
    "#    Write a user-defined function to calculate the sum of all the movies released per Year group. \n",
    "#    You can use the same user-defined function as in question 2.\n",
    "#    Specify the arguments as the DataFrame to use (mov_ott) and the column as Year. \n",
    "#    Ensure the data type is category by specifying astype('category').\n",
    "#    Print the Series.\n",
    "\n",
    "def movies_per_yr (df1):\n",
    "    print(df1.value_counts())\n",
    "    return ;\n",
    "\n",
    "movies_per_yr(mov_ott[\"Year\"].astype('category')) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdf31fc5",
   "metadata": {},
   "source": [
    "# LSE's solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ece4f501",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Pandas.\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Load the Excel data using pd.read_excel.\n",
    "movies = pd.read_excel('movies_merge.xlsx')\n",
    "\n",
    "# Load the csv data using pd.read_csv.\n",
    "ott = pd.read_csv('ott_merge.csv')\n",
    "\n",
    "# Data imported correctly?\n",
    "print(movies.columns)\n",
    "print(movies.shape)\n",
    "print(ott.columns)\n",
    "print(ott.shape)\n",
    "\n",
    "# Merge the two DataFrames.\n",
    "mov_ott = pd.merge(movies, ott, how='left', on = 'ID')\n",
    "\n",
    "# DataFrames merged correctly?\n",
    "print(mov_ott.columns)\n",
    "print(mov_ott.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8542b7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Question 1: What is the average rating per movie?\n",
    "\n",
    "# View IMDb and Rotten Tomatoes columns.\n",
    "mov_ott_ratings = mov_ott[['ID', 'IMDb', 'Rotten Tomatoes']]\n",
    "\n",
    "# View the DataFrame.\n",
    "mov_ott_ratings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e22cbb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace missing values with 0.\n",
    "mov_ott_ratings_final = mov_ott_ratings.fillna(0)\n",
    "\n",
    "# View the DataFrame.\n",
    "mov_ott_ratings_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eab30968",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add a new column to the DataFrame indicating average rating.\n",
    "# Average rating is ((IMDb/10) + Rotten Tomaties)/n.\n",
    "# Write a user defined function.\n",
    "def av_col2(df1,df2):\n",
    "    df = (df1/10 + df2)/2\n",
    "    return df\n",
    "\n",
    "mov_ott_ratings_final['Rating'] = av_col2(mov_ott_ratings_final['IMDb'], mov_ott_ratings_final['Rotten Tomatoes'])\n",
    "\n",
    "# View the DataFrame.\n",
    "mov_ott_ratings_final    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aae44ea1",
   "metadata": {},
   "source": [
    "## Question 2: How many movies were released per content rating (age)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31d85636",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Categorical count. \n",
    "def cat_cnt(df1):\n",
    "    print(df1.value_counts())\n",
    "\n",
    "# Number of movies released per 'Age'.\n",
    "df = mov_ott['Age'].astype('category')\n",
    "\n",
    "# View the output.\n",
    "cat_cnt(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "accda83c",
   "metadata": {},
   "source": [
    "## Question 3: How many movies were released per year?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9add9288",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Categorical count. \n",
    "def cat_cnt(df1):\n",
    "    print(df1.value_counts())\n",
    "\n",
    "# Number of movies released per 'Year'.\n",
    "df = mov_ott['Year'].astype('category')\n",
    "\n",
    "# View the output.\n",
    "cat_cnt(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84d6bcae",
   "metadata": {},
   "source": [
    "# REFLECTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "206ca22b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#FOROGT TO FILLNA()\n",
    "\n",
    "# Replace missing values with 0.\n",
    "mov_ott_ratings_final = mov_ott_ratings.fillna(0)\n",
    "\n",
    "# View the DataFrame.\n",
    "mov_ott_ratings_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b42e8883",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc1ee36b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50f33c78",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "079686ff",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
